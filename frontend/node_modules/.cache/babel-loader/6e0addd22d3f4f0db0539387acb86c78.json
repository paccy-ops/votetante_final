{"ast":null,"code":"var _jsxFileName = \"/Users/pacifique/Desktop/UC/ClASSpROJECT/voteTante/frontend/src/screen/EditProfileScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Input from '../shared/components/FormElements/Input';\nimport Button from '../shared/components/FormElements/Button';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Card from '../shared/components/UIElements/Card';\nimport LoadingSpinner from '../shared/components/UIElements/LoadingSpinner';\nimport { VALIDATOR_EMAIL, VALIDATOR_MINLENGTH, VALIDATOR_REQUIRE } from '../shared/util/validators';\nimport { useForm } from '../shared/hooks/form-hook';\nimport { getUserDetails, updateUserProfile } from '../Action/UserActions';\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/UserConstant';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction EditProfileScreen({\n  history\n}) {\n  _s();\n\n  const [message, setMessage] = useState('');\n  const dispatch = useDispatch();\n  const useDetails = useSelector(state => state.useDetails);\n  const {\n    loading,\n    error,\n    user\n  } = useDetails;\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin;\n  const userUpdateProfile = useSelector(state => state.userUpdateProfile);\n  const {\n    success\n  } = userUpdateProfile;\n  const [formState, inputHandler, setFormData] = useForm({\n    email: {\n      value: '',\n      isValid: false\n    },\n    password: {\n      value: '',\n      isValid: false\n    },\n    passwordConfirm: {\n      value: '',\n      isValid: false\n    },\n    name: {\n      value: '',\n      isValid: false\n    },\n    location: {\n      value: '',\n      isValid: false\n    },\n    image: {\n      value: '',\n      isValid: false\n    },\n    bio: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n  useEffect(() => {\n    if (!userInfo) {\n      history.push('/login');\n    } else {\n      if (!user || !user.name || success) {\n        dispatch({\n          type: USER_UPDATE_PROFILE_RESET\n        });\n        dispatch(getUserDetails('profile'));\n      } else {\n        setFormData({\n          email: {\n            value: user.email,\n            isValid: true\n          },\n          name: {\n            value: user.name,\n            isValid: true\n          },\n          location: {\n            value: user.location,\n            isValid: true\n          },\n          bio: {\n            value: user.bio,\n            isValid: true\n          }\n        }, true);\n      }\n    }\n  }, [dispatch, userInfo, user, history, setFormData, success]);\n\n  const updateSubmitHandler = e => {\n    e.preventDefault();\n    dispatch(updateUserProfile({\n      id: user.id,\n      name: formState.inputs.name.value,\n      email: formState.inputs.email.value,\n      location: formState.inputs.location.value,\n      bio: formState.inputs.bio.value,\n      password: formState.inputs.password.value\n    }));\n    history.push('/user/profile');\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    onSubmit: updateSubmitHandler,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"login-form-register\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container-form\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-all\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"EDIT YOUR PROFILE  \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 127,\n            columnNumber: 13\n          }, this), message && /*#__PURE__*/_jsxDEV(Card, {\n            className: \"error_message\",\n            children: message\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 128,\n            columnNumber: 23\n          }, this), error && /*#__PURE__*/_jsxDEV(Card, {\n            className: \"error_message\",\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 129,\n            columnNumber: 23\n          }, this), loading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n            asOverlay: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            disabled: !formState.isValid,\n            children: \"SAVE PROFILE\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 132,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EditProfileScreen, \"+hEkIO2qEhz7r3PKcTc78yRIrcI=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useForm];\n});\n\n_c = EditProfileScreen;\nexport default EditProfileScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"EditProfileScreen\");","map":{"version":3,"sources":["/Users/pacifique/Desktop/UC/ClASSpROJECT/voteTante/frontend/src/screen/EditProfileScreen.js"],"names":["React","useEffect","useState","Input","Button","useSelector","useDispatch","Card","LoadingSpinner","VALIDATOR_EMAIL","VALIDATOR_MINLENGTH","VALIDATOR_REQUIRE","useForm","getUserDetails","updateUserProfile","USER_UPDATE_PROFILE_RESET","EditProfileScreen","history","message","setMessage","dispatch","useDetails","state","loading","error","user","userLogin","userInfo","userUpdateProfile","success","formState","inputHandler","setFormData","email","value","isValid","password","passwordConfirm","name","location","image","bio","push","type","updateSubmitHandler","e","preventDefault","id","inputs"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Input from '../shared/components/FormElements/Input';\nimport Button from '../shared/components/FormElements/Button';\nimport { useSelector, useDispatch } from 'react-redux';\nimport Card from '../shared/components/UIElements/Card';\nimport LoadingSpinner from '../shared/components/UIElements/LoadingSpinner';\nimport {\n  VALIDATOR_EMAIL,\n  VALIDATOR_MINLENGTH,\n  VALIDATOR_REQUIRE,\n} from '../shared/util/validators';\nimport { useForm } from '../shared/hooks/form-hook';\nimport { getUserDetails, updateUserProfile } from '../Action/UserActions';\nimport { USER_UPDATE_PROFILE_RESET } from '../constants/UserConstant';\nfunction EditProfileScreen({ history }) {\n \n  const [message, setMessage] = useState('');\n  \n\n  const dispatch = useDispatch()\n\n  const useDetails = useSelector(state => state.useDetails)\n  const {loading,error,user} = useDetails\n\n  const userLogin = useSelector(state => state.userLogin)\n  const {userInfo} = userLogin\n\n  const userUpdateProfile = useSelector(state => state.userUpdateProfile)\n  const {success} = userUpdateProfile\n\n\n\n\n  const [formState, inputHandler,setFormData] = useForm(\n    {\n      email: {\n        value: '',\n        isValid: false,\n      },\n      password: {\n        value: '',\n        isValid: false,\n      },\n      passwordConfirm: {\n        value: '',\n        isValid: false,\n      },\n      name: {\n        value: '',\n        isValid: false,\n      },\n\n      location: {\n        value: '',\n        isValid: false,\n      },\n\n      image: {\n        value: '',\n        isValid: false,\n      },\n\n      bio: {\n        value: '',\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  useEffect(() => {\n    if(!userInfo){\n  history.push('/login')\n    }else{\n      if(!user || !user.name||success){\n        dispatch({type:USER_UPDATE_PROFILE_RESET})\n        dispatch(getUserDetails('profile')) \n      }else{\n        setFormData({\n          email: {\n            value: user.email,\n            isValid: true,\n          },\n          name: {\n            value: user.name,\n            isValid: true,\n          },\n    \n          location: {\n            value: user.location,\n            isValid: true,\n          },\n    \n          bio: {\n            value: user.bio,\n            isValid: true,\n          },\n          \n        },true)\n      }\n    }\n    \n    \n  }, [dispatch,userInfo,user,history,setFormData,success])\n  \n  const updateSubmitHandler = (e) => {\n    e.preventDefault();\n \n   \n     dispatch(updateUserProfile({\n       id:user.id,\n       name:formState.inputs.name.value,\n       email:formState.inputs.email.value,\n       location:formState.inputs.location.value,\n       bio:formState.inputs.bio.value,\n       password:formState.inputs.password.value,\n     }))\n      history.push('/user/profile')\n  \n    \n  };\n  return (\n    <form onSubmit={updateSubmitHandler}>\n      <div className='login-form-register'>\n        <div className='container-form'>\n          <div className='form-all'>\n            <h2>EDIT YOUR PROFILE  </h2>\n            {message&&<Card className='error_message'>{message}</Card>}\n            {error && <Card className='error_message'>{error}</Card>}\n            {loading && <LoadingSpinner asOverlay />}\n            <input type=\"text\"/>\n            <Button type='submit' disabled={!formState.isValid}>\n              SAVE PROFILE\n            </Button>\n\n            \n              \n            \n          </div>\n        </div>\n      </div>\n    </form>\n  );\n}\n\n\n\nexport default EditProfileScreen;\n"]},"metadata":{},"sourceType":"module"}