{"ast":null,"code":"var _jsxFileName = \"/Users/pacifique/Desktop/UC/ClASSpROJECT/voteTante/frontend/src/screen/VotingScreenPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CreatePostVote, listPostDetails } from '../Action/PostActions';\nimport LoadingSpinner from '../shared/components/UIElements/LoadingSpinner';\nimport Card from '../shared/components/UIElements/Card';\nimport { APPLY_CREATE_RESET } from '../constants/CandidatesConstants';\nimport Button from '../shared/components/FormElements/Button';\nimport { POST_CREATE_VOTE_RESET } from '../constants/PostConstants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst VotingScreenPage = ({\n  match,\n  history\n}) => {\n  _s();\n\n  const dispatch = useDispatch();\n  const [data, setData] = useState([]);\n  const [cast, setCast] = useState();\n  const [loadingData, setLoadingData] = useState(false);\n  const postId = match.params.id;\n  const postDetails = useSelector(state => state.postDetails);\n  const {\n    post,\n    loading,\n    errors\n  } = postDetails;\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin;\n  const votePost = useSelector(state => state.votePost);\n  const {\n    success: successCreatedVote,\n    loading: loadingCreatedVote,\n    error: errorCreatedVote\n  } = votePost;\n  useEffect(() => {\n    dispatch({\n      type: APPLY_CREATE_RESET\n    });\n\n    if (!userInfo) {\n      history.push('/login/user');\n    } else if (successCreatedVote) {\n      history.push(`/user/candidate/${post.id}/edit`);\n    } else {\n      dispatch(listPostDetails(postId));\n\n      if (post.candidates) {\n        setLoadingData(false);\n        setData(post.candidates);\n      } else {\n        setData([]);\n        setLoadingData(true);\n      }\n    }\n  }, [dispatch, postId, history, post, successCreatedVote, userInfo]);\n\n  const votingSubmitHandler = () => {// \n  };\n\n  if (loadingData) {\n    return /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n      asOverlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 12\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    style: {\n      marginTop: '200px'\n    },\n    onSubmit: votingSubmitHandler,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"You are Voting for\", ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          margin: '10px',\n          color: 'seagreen'\n        },\n        children: post.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), \"Post\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"section-candidate\",\n      children: [data.map(postCandidate => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          children: postCandidate.isPass && /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"posts\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"description\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"img\", {\n                  src: postCandidate.candidate_image,\n                  alt: postCandidate.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 82,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  style: {\n                    marginLeft: '20px',\n                    fontSize: '12px'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    style: {\n                      color: 'green'\n                    },\n                    children: \"Name:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 87,\n                    columnNumber: 27\n                  }, this), postCandidate.name]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 86,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                  style: {\n                    fontSize: '12px'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"spn\", {\n                    style: {\n                      color: '#000'\n                    },\n                    children: \"Applied For: \"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 91,\n                    columnNumber: 27\n                  }, this), /*#__PURE__*/_jsxDEV(\"sp\", {\n                    children: postCandidate.title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 92,\n                    columnNumber: 27\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 90,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n                  style: {\n                    fontSize: '12px'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    style: {\n                      color: '#000'\n                    },\n                    children: \"E-mail:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 95,\n                    columnNumber: 27\n                  }, this), ' ', postCandidate.candidate_email]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 94,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  style: {\n                    fontSize: '15px',\n                    width: '90%',\n                    marginLeft: '10px',\n                    fontFamily: 'sans-serif'\n                  },\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    style: {\n                      marginRight: '10px',\n                      color: 'seagreen'\n                    },\n                    children: \"Bio:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 106,\n                    columnNumber: 27\n                  }, this), postCandidate.bio.slice(1, 100)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"form-check\",\n                  children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                    style: {\n                      padding: '20px'\n                    },\n                    value: cast,\n                    onChange: e => setCast(e.target.checked),\n                    class: \"form-check-input\",\n                    type: \"radio\",\n                    name: \"flexRadioDefault\",\n                    id: \"flexRadioDefault1\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 117,\n                    columnNumber: 19\n                  }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                    style: {\n                      fontSize: '18px'\n                    },\n                    class: \"form-check-label\",\n                    for: \"flexRadioDefault1\",\n                    children: [/*#__PURE__*/_jsxDEV(\"i\", {\n                      class: \"fas fa-vote-yea\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 119,\n                      columnNumber: 19\n                    }, this), postCandidate.name]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 118,\n                    columnNumber: 19\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 116,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 81,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 80,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 19\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 15\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(Button, {\n        disabled: !cast,\n        style: {\n          width: '10%'\n        },\n        type: \"submit\",\n        children: \"submit vote\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n};\n\n_s(VotingScreenPage, \"IqnVt8M7LoaXI6evwlt2rkDYkWc=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = VotingScreenPage;\nexport default _c2 = withRouter(VotingScreenPage);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"VotingScreenPage\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/pacifique/Desktop/UC/ClASSpROJECT/voteTante/frontend/src/screen/VotingScreenPage.js"],"names":["React","useEffect","useState","Link","withRouter","useSelector","useDispatch","CreatePostVote","listPostDetails","LoadingSpinner","Card","APPLY_CREATE_RESET","Button","POST_CREATE_VOTE_RESET","VotingScreenPage","match","history","dispatch","data","setData","cast","setCast","loadingData","setLoadingData","postId","params","id","postDetails","state","post","loading","errors","userLogin","userInfo","votePost","success","successCreatedVote","loadingCreatedVote","error","errorCreatedVote","type","push","candidates","votingSubmitHandler","marginTop","margin","color","title","map","postCandidate","isPass","candidate_image","name","marginLeft","fontSize","candidate_email","width","fontFamily","marginRight","bio","slice","padding","e","target","checked"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\n\nimport { Link, withRouter } from 'react-router-dom';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { CreatePostVote, listPostDetails } from '../Action/PostActions';\nimport LoadingSpinner from '../shared/components/UIElements/LoadingSpinner';\nimport Card from '../shared/components/UIElements/Card';\nimport { APPLY_CREATE_RESET } from '../constants/CandidatesConstants';\nimport Button from '../shared/components/FormElements/Button'\nimport { POST_CREATE_VOTE_RESET } from '../constants/PostConstants';\n\nconst VotingScreenPage = ({ match, history }) => {\n  const dispatch = useDispatch();\n\n  const [data, setData] = useState([]);\n  const [cast, setCast] = useState();\n  const [loadingData, setLoadingData] = useState(false);\n\n  const postId = match.params.id;\n\n  const postDetails = useSelector((state) => state.postDetails);\n  const { post, loading, errors } = postDetails;\n  \n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const votePost = useSelector((state) => state.votePost);\n  const {\n    success: successCreatedVote,\n    loading: loadingCreatedVote,\n    error: errorCreatedVote,\n  } = votePost;\n\n  useEffect(() => {\n    dispatch({ type: APPLY_CREATE_RESET });\n    if (!userInfo) {\n      history.push('/login/user');\n    } else if (successCreatedVote) {\n      history.push(`/user/candidate/${post.id}/edit`);\n    } else {\n      dispatch(listPostDetails(postId));\n      if (post.candidates) {\n        setLoadingData(false);\n        setData(post.candidates);\n      } else {\n        setData([]);\n        setLoadingData(true);\n      }\n    }\n  }, [dispatch, postId, history, post, successCreatedVote, userInfo]);\n\n  const votingSubmitHandler = () =>{\n    // \n  }\n  if (loadingData) {\n    return <LoadingSpinner asOverlay />;\n  }\n\n\n  return (\n    <form style={{ marginTop: '200px' }} onSubmit={votingSubmitHandler}>\n\n   \n        <h1>\n          You are Voting for{' '}\n          <span style={{ margin: '10px', color: 'seagreen' }}>\n            {post.title}\n          </span>\n          Post\n        </h1>\n    \n\n      <div className='section-candidate'>\n       \n          {data.map((postCandidate) => {\n            return (\n              <div>\n                {postCandidate.isPass && (\n                  <div className='posts'>\n                    <div className='description'>\n                      <div>\n                        <img\n                          src={postCandidate.candidate_image}\n                          alt={postCandidate.name}\n                        />\n                        <span style={{ marginLeft: '20px', fontSize: '12px' }}>\n                          <span style={{ color: 'green' }}>Name:</span>\n                          {postCandidate.name}\n                        </span>\n                        <h4 style={{ fontSize: '12px' }}>\n                          <spn style={{ color: '#000' }}>Applied For: </spn>\n                          <sp>{postCandidate.title}</sp>\n                        </h4>\n                        <h4 style={{ fontSize: '12px' }}>\n                          <span style={{ color: '#000' }}>E-mail:</span>{' '}\n                          {postCandidate.candidate_email}\n                        </h4>\n\n                        <p\n                          style={{\n                            fontSize: '15px',\n                            width: '90%',\n                            marginLeft: '10px',\n                            fontFamily: 'sans-serif',\n                          }}>\n                          <span\n                            style={{\n                              marginRight: '10px',\n                              color: 'seagreen',\n                            }}>\n                            Bio:\n                          </span>\n                          {postCandidate.bio.slice(1, 100)}\n                        </p>\n\n                        <div class=\"form-check\">\n                  <input style={{padding:'20px'}} value={cast} onChange={(e) => setCast(e.target.checked)} class=\"form-check-input\" type=\"radio\" name=\"flexRadioDefault\" id=\"flexRadioDefault1\"/>\n                  <label style={{fontSize:'18px'}} class=\"form-check-label\" for=\"flexRadioDefault1\">\n                  <i class=\"fas fa-vote-yea\"></i>{postCandidate.name}\n                  </label>\n                </div>\n                                      </div>\n                    </div>\n                  </div>\n                )}\n              </div>\n            );\n          })}\n          \n          <Button disabled={!cast} style={{width:'10%'}}  type=\"submit\">submit vote</Button>\n\n      </div>\n      \n    </form>\n  );\n};\n\nexport default withRouter(VotingScreenPage);\n"]},"metadata":{},"sourceType":"module"}