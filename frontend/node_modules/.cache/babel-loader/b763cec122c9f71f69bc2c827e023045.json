{"ast":null,"code":"var _jsxFileName = \"/Users/pacifique/Desktop/UC/ClASSpROJECT/voteTante/frontend/src/screen/ApplyScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Button from '../shared/components/FormElements/Button';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport Card from '../shared/components/UIElements/Card';\nimport LoadingSpinner from '../shared/components/UIElements/LoadingSpinner';\nimport './EditProfileScreen.css';\nimport Notification from '../shared/components/UIElements/Notification';\nimport { listPostDetails, PostUpdate } from '../Action/PostActions';\nimport { POST_UPDATE_RESET } from '../constants/PostConstants';\nimport { getCandidateDetails } from '../Action/CandidateActions';\nimport { VALIDATOR_REQUIRE, VALIDATOR_EMAIL } from '../shared/util/validators';\nimport { useForm } from '../shared/hooks/form-hook';\nimport Input from '../shared/components/FormElements/Input';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ApplyScreen({\n  match,\n  history\n}) {\n  _s();\n\n  const [notify, setNotify] = useState({\n    isOpen: false,\n    message: '',\n    type: ''\n  });\n  const postId = match.params.id;\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [isActive, setIsActive] = useState(false);\n  const [isApplying, setIsApplying] = useState(false);\n  const dispatch = useDispatch();\n  const postDetails = useSelector(state => state.postDetails);\n  const {\n    loading,\n    error,\n    post\n  } = postDetails;\n  const candidateDetails = useSelector(state => state.candidateDetails);\n  const {\n    candidate\n  } = candidateDetails;\n  console.log(candidate);\n  const postUpdate = useSelector(state => state.postUpdate);\n  const {\n    success: successUpdate,\n    error: errorUpdate,\n    loading: loadingUpdate\n  } = postUpdate;\n  const [formState, inputHandler] = useForm({\n    email: {\n      value: '',\n      isValid: false\n    },\n    password: {\n      value: '',\n      isValid: false\n    },\n    passwordConfirm: {\n      value: '',\n      isValid: false\n    },\n    name: {\n      value: '',\n      isValid: false\n    }\n  }, false);\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({\n        type: POST_UPDATE_RESET\n      });\n      history.push('/admin/posts');\n    } else {\n      if (!post.title || post.id !== Number(postId)) {\n        dispatch(listPostDetails(postId));\n        dispatch(getCandidateDetails(postId));\n      } else {\n        setTitle(candidate.title);\n        setDescription(post.description);\n        setIsActive(post.isActive);\n        setIsApplying(post.isApplying);\n      }\n    }\n  }, [dispatch, history, candidate, successUpdate, post, postId]);\n\n  const updateSubmitHandler = e => {\n    e.preventDefault();\n    dispatch(PostUpdate({\n      id: postId,\n      title,\n      description,\n      isActive,\n      isApplying\n    }));\n    setNotify({\n      isOpen: true,\n      message: 'Submitted Successfully',\n      type: 'success'\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: updateSubmitHandler,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"login-form-register\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container-form\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-all\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"Register With Us \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 107,\n              columnNumber: 15\n            }, this), error && /*#__PURE__*/_jsxDEV(Card, {\n              className: \"error_message\",\n              children: error\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 25\n            }, this), loading && /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n              asOverlay: true\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 27\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              element: \"input\",\n              id: \"name\",\n              type: \"text\",\n              label: \"Name\",\n              placeholder: \"Enter Name\",\n              validators: [VALIDATOR_REQUIRE()],\n              errorText: \"Name Required\",\n              onInput: inputHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Input, {\n              element: \"input\",\n              id: \"email\",\n              type: \"email\",\n              label: \"E-Mail\",\n              placeholder: \"Enter E-Mail\",\n              validators: [VALIDATOR_EMAIL()],\n              errorText: \"Please enter a valid email address.\",\n              onInput: inputHandler\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 120,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              disabled: !formState.isValid,\n              children: \"Register\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 131,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 106,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      notify: notify,\n      setNotify: setNotify\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ApplyScreen, \"TNOuIXY7aReMdiCEzW+fZvpu6eo=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector, useForm];\n});\n\n_c = ApplyScreen;\nexport default _c2 = withRouter(ApplyScreen);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"ApplyScreen\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/pacifique/Desktop/UC/ClASSpROJECT/voteTante/frontend/src/screen/ApplyScreen.js"],"names":["React","useEffect","useState","Button","useSelector","useDispatch","Link","withRouter","Card","LoadingSpinner","Notification","listPostDetails","PostUpdate","POST_UPDATE_RESET","getCandidateDetails","VALIDATOR_REQUIRE","VALIDATOR_EMAIL","useForm","Input","ApplyScreen","match","history","notify","setNotify","isOpen","message","type","postId","params","id","title","setTitle","description","setDescription","isActive","setIsActive","isApplying","setIsApplying","dispatch","postDetails","state","loading","error","post","candidateDetails","candidate","console","log","postUpdate","success","successUpdate","errorUpdate","loadingUpdate","formState","inputHandler","email","value","isValid","password","passwordConfirm","name","push","Number","updateSubmitHandler","e","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,0CAAnB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,kBAAjC;AAEA,OAAOC,IAAP,MAAiB,sCAAjB;AACA,OAAOC,cAAP,MAA2B,gDAA3B;AACA,OAAO,yBAAP;AACA,OAAOC,YAAP,MAAyB,8CAAzB;AACA,SAASC,eAAT,EAA0BC,UAA1B,QAA4C,uBAA5C;AACA,SAASC,iBAAT,QAAkC,4BAAlC;AACA,SAASC,mBAAT,QAAoC,4BAApC;AACA,SAASC,iBAAT,EAA4BC,eAA5B,QAAmD,2BAAnD;AACA,SAASC,OAAT,QAAwB,2BAAxB;AACA,OAAOC,KAAP,MAAkB,yCAAlB;;;AACA,SAASC,WAAT,CAAqB;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAArB,EAAyC;AAAA;;AACvC,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBrB,QAAQ,CAAC;AACnCsB,IAAAA,MAAM,EAAE,KAD2B;AAEnCC,IAAAA,OAAO,EAAE,EAF0B;AAGnCC,IAAAA,IAAI,EAAE;AAH6B,GAAD,CAApC;AAKA,QAAMC,MAAM,GAAGP,KAAK,CAACQ,MAAN,CAAaC,EAA5B;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoB7B,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAAC8B,WAAD,EAAcC,cAAd,IAAgC/B,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM,CAACgC,QAAD,EAAWC,WAAX,IAA0BjC,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACkC,UAAD,EAAaC,aAAb,IAA8BnC,QAAQ,CAAC,KAAD,CAA5C;AAEA,QAAMoC,QAAQ,GAAGjC,WAAW,EAA5B;AAEA,QAAMkC,WAAW,GAAGnC,WAAW,CAAEoC,KAAD,IAAWA,KAAK,CAACD,WAAlB,CAA/B;AACA,QAAM;AAAEE,IAAAA,OAAF;AAAWC,IAAAA,KAAX;AAAkBC,IAAAA;AAAlB,MAA2BJ,WAAjC;AAEA,QAAMK,gBAAgB,GAAGxC,WAAW,CAAEoC,KAAD,IAAWA,KAAK,CAACI,gBAAlB,CAApC;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAgBD,gBAAtB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAYF,SAAZ;AAEA,QAAMG,UAAU,GAAG5C,WAAW,CAAEoC,KAAD,IAAWA,KAAK,CAACQ,UAAlB,CAA9B;AACA,QAAM;AACJC,IAAAA,OAAO,EAAEC,aADL;AAEJR,IAAAA,KAAK,EAAES,WAFH;AAGJV,IAAAA,OAAO,EAAEW;AAHL,MAIFJ,UAJJ;AAMA,QAAM,CAACK,SAAD,EAAYC,YAAZ,IAA4BrC,OAAO,CACvC;AACEsC,IAAAA,KAAK,EAAE;AACLC,MAAAA,KAAK,EAAE,EADF;AAELC,MAAAA,OAAO,EAAE;AAFJ,KADT;AAKEC,IAAAA,QAAQ,EAAE;AACRF,MAAAA,KAAK,EAAE,EADC;AAERC,MAAAA,OAAO,EAAE;AAFD,KALZ;AASEE,IAAAA,eAAe,EAAE;AACfH,MAAAA,KAAK,EAAE,EADQ;AAEfC,MAAAA,OAAO,EAAE;AAFM,KATnB;AAaEG,IAAAA,IAAI,EAAE;AACJJ,MAAAA,KAAK,EAAE,EADH;AAEJC,MAAAA,OAAO,EAAE;AAFL;AAbR,GADuC,EAmBvC,KAnBuC,CAAzC;AAsBAxD,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiD,aAAJ,EAAmB;AACjBZ,MAAAA,QAAQ,CAAC;AAAEZ,QAAAA,IAAI,EAAEb;AAAR,OAAD,CAAR;AACAQ,MAAAA,OAAO,CAACwC,IAAR,CAAa,cAAb;AACD,KAHD,MAGO;AACL,UAAI,CAAClB,IAAI,CAACb,KAAN,IAAea,IAAI,CAACd,EAAL,KAAYiC,MAAM,CAACnC,MAAD,CAArC,EAA+C;AAC7CW,QAAAA,QAAQ,CAAC3B,eAAe,CAACgB,MAAD,CAAhB,CAAR;AACAW,QAAAA,QAAQ,CAACxB,mBAAmB,CAACa,MAAD,CAApB,CAAR;AACD,OAHD,MAGO;AACLI,QAAAA,QAAQ,CAACc,SAAS,CAACf,KAAX,CAAR;AACAG,QAAAA,cAAc,CAACU,IAAI,CAACX,WAAN,CAAd;AACAG,QAAAA,WAAW,CAACQ,IAAI,CAACT,QAAN,CAAX;AACAG,QAAAA,aAAa,CAACM,IAAI,CAACP,UAAN,CAAb;AACD;AACF;AACF,GAfQ,EAeN,CAACE,QAAD,EAAWjB,OAAX,EAAoBwB,SAApB,EAA+BK,aAA/B,EAA8CP,IAA9C,EAAoDhB,MAApD,CAfM,CAAT;;AAiBA,QAAMoC,mBAAmB,GAAIC,CAAD,IAAO;AACjCA,IAAAA,CAAC,CAACC,cAAF;AAEA3B,IAAAA,QAAQ,CACN1B,UAAU,CAAC;AACTiB,MAAAA,EAAE,EAAEF,MADK;AAETG,MAAAA,KAFS;AAGTE,MAAAA,WAHS;AAITE,MAAAA,QAJS;AAKTE,MAAAA;AALS,KAAD,CADJ,CAAR;AASAb,IAAAA,SAAS,CAAC;AACRC,MAAAA,MAAM,EAAE,IADA;AAERC,MAAAA,OAAO,EAAE,wBAFD;AAGRC,MAAAA,IAAI,EAAE;AAHE,KAAD,CAAT;AAKD,GAjBD;;AAkBA,sBACE;AAAA,4BACE;AAAM,MAAA,QAAQ,EAAEqC,mBAAhB;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA,+BACE;AAAK,UAAA,SAAS,EAAC,gBAAf;AAAA,iCACE;AAAK,YAAA,SAAS,EAAC,UAAf;AAAA,oCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBADF,EAEGrB,KAAK,iBAAI,QAAC,IAAD;AAAM,cAAA,SAAS,EAAC,eAAhB;AAAA,wBAAiCA;AAAjC;AAAA;AAAA;AAAA;AAAA,oBAFZ,EAGGD,OAAO,iBAAI,QAAC,cAAD;AAAgB,cAAA,SAAS;AAAzB;AAAA;AAAA;AAAA;AAAA,oBAHd,eAIE,QAAC,KAAD;AACE,cAAA,OAAO,EAAC,OADV;AAEE,cAAA,EAAE,EAAC,MAFL;AAGE,cAAA,IAAI,EAAC,MAHP;AAIE,cAAA,KAAK,EAAC,MAJR;AAKE,cAAA,WAAW,EAAC,YALd;AAME,cAAA,UAAU,EAAE,CAAC1B,iBAAiB,EAAlB,CANd;AAOE,cAAA,SAAS,EAAC,eAPZ;AAQE,cAAA,OAAO,EAAEuC;AARX;AAAA;AAAA;AAAA;AAAA,oBAJF,eAcE,QAAC,KAAD;AACE,cAAA,OAAO,EAAC,OADV;AAEE,cAAA,EAAE,EAAC,OAFL;AAGE,cAAA,IAAI,EAAC,OAHP;AAIE,cAAA,KAAK,EAAC,QAJR;AAKE,cAAA,WAAW,EAAC,cALd;AAME,cAAA,UAAU,EAAE,CAACtC,eAAe,EAAhB,CANd;AAOE,cAAA,SAAS,EAAC,qCAPZ;AAQE,cAAA,OAAO,EAAEsC;AARX;AAAA;AAAA;AAAA;AAAA,oBAdF,eAyBE,QAAC,MAAD;AAAQ,cAAA,IAAI,EAAC,QAAb;AAAsB,cAAA,QAAQ,EAAE,CAACD,SAAS,CAACI,OAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAzBF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAoCE,QAAC,YAAD;AAAc,MAAA,MAAM,EAAEnC,MAAtB;AAA8B,MAAA,SAAS,EAAEC;AAAzC;AAAA;AAAA;AAAA;AAAA,YApCF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAwCD;;GA7HQJ,W;UAYUd,W,EAEGD,W,EAGKA,W,EAINA,W,EAOea,O;;;KA5B3BE,W;AA+HT,qBAAeZ,UAAU,CAACY,WAAD,CAAzB","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Button from '../shared/components/FormElements/Button';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link, withRouter } from 'react-router-dom';\n\nimport Card from '../shared/components/UIElements/Card';\nimport LoadingSpinner from '../shared/components/UIElements/LoadingSpinner';\nimport './EditProfileScreen.css';\nimport Notification from '../shared/components/UIElements/Notification';\nimport { listPostDetails, PostUpdate } from '../Action/PostActions';\nimport { POST_UPDATE_RESET } from '../constants/PostConstants';\nimport { getCandidateDetails } from '../Action/CandidateActions';\nimport { VALIDATOR_REQUIRE, VALIDATOR_EMAIL } from '../shared/util/validators';\nimport { useForm } from '../shared/hooks/form-hook';\nimport Input from '../shared/components/FormElements/Input';\nfunction ApplyScreen({ match, history }) {\n  const [notify, setNotify] = useState({\n    isOpen: false,\n    message: '',\n    type: '',\n  });\n  const postId = match.params.id;\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [isActive, setIsActive] = useState(false);\n  const [isApplying, setIsApplying] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const postDetails = useSelector((state) => state.postDetails);\n  const { loading, error, post } = postDetails;\n\n  const candidateDetails = useSelector((state) => state.candidateDetails);\n  const { candidate } = candidateDetails;\n  console.log(candidate);\n\n  const postUpdate = useSelector((state) => state.postUpdate);\n  const {\n    success: successUpdate,\n    error: errorUpdate,\n    loading: loadingUpdate,\n  } = postUpdate;\n\n  const [formState, inputHandler] = useForm(\n    {\n      email: {\n        value: '',\n        isValid: false,\n      },\n      password: {\n        value: '',\n        isValid: false,\n      },\n      passwordConfirm: {\n        value: '',\n        isValid: false,\n      },\n      name: {\n        value: '',\n        isValid: false,\n      },\n    },\n    false\n  );\n\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({ type: POST_UPDATE_RESET });\n      history.push('/admin/posts');\n    } else {\n      if (!post.title || post.id !== Number(postId)) {\n        dispatch(listPostDetails(postId));\n        dispatch(getCandidateDetails(postId));\n      } else {\n        setTitle(candidate.title);\n        setDescription(post.description);\n        setIsActive(post.isActive);\n        setIsApplying(post.isApplying);\n      }\n    }\n  }, [dispatch, history, candidate, successUpdate, post, postId]);\n\n  const updateSubmitHandler = (e) => {\n    e.preventDefault();\n\n    dispatch(\n      PostUpdate({\n        id: postId,\n        title,\n        description,\n        isActive,\n        isApplying,\n      })\n    );\n    setNotify({\n      isOpen: true,\n      message: 'Submitted Successfully',\n      type: 'success',\n    });\n  };\n  return (\n    <div>\n      <form onSubmit={updateSubmitHandler}>\n        <div className='login-form-register'>\n          <div className='container-form'>\n            <div className='form-all'>\n              <h2>Register With Us </h2>\n              {error && <Card className='error_message'>{error}</Card>}\n              {loading && <LoadingSpinner asOverlay />}\n              <Input\n                element='input'\n                id='name'\n                type='text'\n                label='Name'\n                placeholder='Enter Name'\n                validators={[VALIDATOR_REQUIRE()]}\n                errorText='Name Required'\n                onInput={inputHandler}\n              />\n              <Input\n                element='input'\n                id='email'\n                type='email'\n                label='E-Mail'\n                placeholder='Enter E-Mail'\n                validators={[VALIDATOR_EMAIL()]}\n                errorText='Please enter a valid email address.'\n                onInput={inputHandler}\n              />\n\n              <Button type='submit' disabled={!formState.isValid}>\n                Register\n              </Button>\n            </div>\n          </div>\n        </div>\n      </form>\n      <Notification notify={notify} setNotify={setNotify} />\n    </div>\n  );\n}\n\nexport default withRouter(ApplyScreen);\n"]},"metadata":{},"sourceType":"module"}