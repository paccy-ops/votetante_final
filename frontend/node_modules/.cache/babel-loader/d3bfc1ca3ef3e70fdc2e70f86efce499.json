{"ast":null,"code":"var _jsxFileName = \"/Users/pacifique/Desktop/UC/apps/src/shared/components/FormElements/Input.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, useEffect } from 'react';\nimport { validate } from '../../util/validators';\nimport './Input.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return { ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators)\n      };\n\n    case 'TOUCH':\n      {\n        return { ...state,\n          isTouched: true\n        };\n      }\n\n    default:\n      return state;\n  }\n};\n\nconst Input = props => {\n  _s();\n\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',\n    isTouched: false,\n    isValid: props.initialValid || false\n  });\n  const {\n    id,\n    onInput\n  } = props;\n  const {\n    value,\n    isValid\n  } = inputState;\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = event => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH'\n    });\n  };\n\n  const element = props.element === 'input' ? /*#__PURE__*/_jsxDEV(\"input\", {\n    id: props.id,\n    type: props.type,\n    placeholder: props.placeholder,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    className: props.className\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 7\n  }, this) : /*#__PURE__*/_jsxDEV(\"textarea\", {\n    id: props.id,\n    rows: props.rows || 3,\n    onChange: changeHandler,\n    onBlur: touchHandler,\n    value: inputState.value,\n    className: props.className\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 65,\n    columnNumber: 7\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `form-control  ${!inputState.isValid && inputState.isTouched ? 'form-control--invalid' : 'form-control--valid'}`,\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: props.id,\n      children: props.label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), element, !inputState.isValid && inputState.isTouched && /*#__PURE__*/_jsxDEV(\"small\", {\n      children: props.errorText\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"ig11+gWHV1YqIOhw9KdZ2bmsuf8=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["/Users/pacifique/Desktop/UC/apps/src/shared/components/FormElements/Input.js"],"names":["React","useReducer","useEffect","validate","inputReducer","state","action","type","value","val","isValid","validators","isTouched","Input","props","inputState","dispatch","initialValue","initialValid","id","onInput","changeHandler","event","target","touchHandler","element","placeholder","className","rows","label","errorText"],"mappings":"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","sourcesContent":["import React, { useReducer, useEffect } from 'react';\n\nimport { validate } from '../../util/validators';\nimport './Input.css';\n\nconst inputReducer = (state, action) => {\n  switch (action.type) {\n    case 'CHANGE':\n      return {\n        ...state,\n        value: action.val,\n        isValid: validate(action.val, action.validators),\n      };\n    case 'TOUCH': {\n      return {\n        ...state,\n        isTouched: true,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst Input = (props) => {\n  const [inputState, dispatch] = useReducer(inputReducer, {\n    value: props.initialValue || '',\n    isTouched: false,\n    isValid: props.initialValid || false,\n  });\n\n  const { id, onInput } = props;\n  const { value, isValid } = inputState;\n\n  useEffect(() => {\n    onInput(id, value, isValid);\n  }, [id, value, isValid, onInput]);\n\n  const changeHandler = (event) => {\n    dispatch({\n      type: 'CHANGE',\n      val: event.target.value,\n      validators: props.validators,\n    });\n  };\n\n  const touchHandler = () => {\n    dispatch({\n      type: 'TOUCH',\n    });\n  };\n\n  const element =\n    props.element === 'input' ? (\n      <input\n        id={props.id}\n        type={props.type}\n        placeholder={props.placeholder}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n        className={props.className}\n      />\n    ) : (\n      <textarea\n        id={props.id}\n        rows={props.rows || 3}\n        onChange={changeHandler}\n        onBlur={touchHandler}\n        value={inputState.value}\n        className={props.className}\n      />\n    );\n\n  return (\n    <div\n      className={`form-control  ${\n        !inputState.isValid && inputState.isTouched\n          ? 'form-control--invalid'\n          : 'form-control--valid'\n      }`}>\n      <label htmlFor={props.id}>{props.label}</label>\n      {element}\n      {!inputState.isValid && inputState.isTouched && (\n        <small>{props.errorText}</small>\n      )}\n    </div>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}