{"ast":null,"code":"var _jsxFileName = \"/Users/pacifique/Desktop/UC/ClASSpROJECT/voteTante/frontend/src/screen/UserListScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport LoadingSpinner from '../shared/components/UIElements/LoadingSpinner';\nimport Card from '../shared/components/UIElements/Card';\nimport './UserListScreen.css';\nimport { deleteUser, listUsers } from '../Action/UserActions';\nimport { EditOutlined, DeleteOutline } from '@material-ui/icons';\nimport Controls from '../shared/controls/Controls';\nimport Notification from '../shared/components/UIElements/Notification';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction UserListScreen({\n  history\n}) {\n  _s();\n\n  const [notify, setNotify] = useState({\n    isOpen: false,\n    message: '',\n    type: ''\n  });\n  const dispatch = useDispatch();\n  const userList = useSelector(state => state.userList);\n  const {\n    users,\n    loading,\n    error\n  } = userList;\n  const userLogin = useSelector(state => state.userLogin);\n  const {\n    userInfo\n  } = userLogin;\n  const userDelete = useSelector(state => state.userDelete);\n  const {\n    success\n  } = userDelete;\n  useEffect(() => {\n    if (userInfo && userInfo.isAdmin) {\n      dispatch(listUsers());\n    } else {\n      history.push('/login');\n    }\n  }, [dispatch, userInfo, history, success]);\n\n  const deleteHandler = id => {\n    if (window.confirm('Are you sure you want to delete this user?')) {\n      dispatch(deleteUser(id));\n\n      if (success) {\n        setNotify({\n          isOpen: true,\n          message: 'Deleted Successfully',\n          type: 'error'\n        });\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"user__list\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      style: {\n        fontSize: \"23px\"\n      },\n      children: \"Users List\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 9\n    }, this), loading ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n      asOverlay: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 19\n    }, this) : error ? /*#__PURE__*/_jsxDEV(Card, {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 53\n    }, this) : /*#__PURE__*/_jsxDEV(\"table\", {\n      children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: [/*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"#\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Name\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 59,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 60,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Address\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Role\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 62,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Candidate\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Actions\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 64,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 9\n        }, this), users.map(user => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.email\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.location\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.isAdmin ? 'Yes' : 'No'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: user.isCandidate ? 'Yes' : 'No'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: [/*#__PURE__*/_jsxDEV(Link, {\n              to: `/admin/users/${user.id}`,\n              children: /*#__PURE__*/_jsxDEV(Controls.ActionButton, {\n                color: \"primary\",\n                children: /*#__PURE__*/_jsxDEV(EditOutlined, {\n                  fontSize: \"small\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 77,\n                  columnNumber: 13\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 76,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(Controls.ActionButton, {\n              color: \"default\",\n              children: /*#__PURE__*/_jsxDEV(DeleteOutline, {\n                fontSize: \"small\",\n                onClick: () => deleteHandler(user.id)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 84,\n                columnNumber: 13\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 11\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 74,\n            columnNumber: 13\n          }, this)]\n        }, user.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      notify: notify,\n      setNotify: setNotify\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 9\n  }, this);\n}\n\n_s(UserListScreen, \"P7XOMqdw7A2XSwhxxNP1/HtqNk4=\", false, function () {\n  return [useDispatch, useSelector, useSelector, useSelector];\n});\n\n_c = UserListScreen;\nexport default UserListScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"UserListScreen\");","map":{"version":3,"sources":["/Users/pacifique/Desktop/UC/ClASSpROJECT/voteTante/frontend/src/screen/UserListScreen.js"],"names":["React","useEffect","useState","useSelector","useDispatch","Link","LoadingSpinner","Card","deleteUser","listUsers","EditOutlined","DeleteOutline","Controls","Notification","UserListScreen","history","notify","setNotify","isOpen","message","type","dispatch","userList","state","users","loading","error","userLogin","userInfo","userDelete","success","isAdmin","push","deleteHandler","id","window","confirm","fontSize","map","user","name","email","location","isCandidate"],"mappings":"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","sourcesContent":["import React,{useEffect,useState} from 'react'\nimport {useSelector,useDispatch} from 'react-redux'\nimport {Link} from 'react-router-dom'\nimport LoadingSpinner from '../shared/components/UIElements/LoadingSpinner'\nimport Card  from '../shared/components/UIElements/Card'\nimport './UserListScreen.css'\nimport { deleteUser, listUsers } from '../Action/UserActions'\nimport { EditOutlined, DeleteOutline } from '@material-ui/icons';\nimport Controls from '../shared/controls/Controls'\nimport Notification from '../shared/components/UIElements/Notification'\nfunction UserListScreen({history}) {\n    const [notify, setNotify] = useState({\n        isOpen: false,\n        message: '',\n        type: '',\n      });\nconst dispatch = useDispatch()\nconst userList = useSelector(state => state.userList)\nconst {users,loading,error} = userList\nconst userLogin = useSelector(state => state.userLogin)\nconst {userInfo} = userLogin\n\nconst userDelete = useSelector(state => state.userDelete)\nconst {success} = userDelete\n\nuseEffect(() => {\n    if(userInfo && userInfo.isAdmin){\n        dispatch(listUsers())\n    }else{\n        history.push('/login')\n    }\n\n  \n    \n}, [dispatch,userInfo,history,success])\n\nconst deleteHandler =  (id) =>{\n    if(window.confirm('Are you sure you want to delete this user?')){\n        dispatch(deleteUser(id))\n        if(success){\n         setNotify({\n             isOpen: true,\n             message: 'Deleted Successfully',\n             type: 'error',\n           });\n     }\n    }\n\n}\n    return (\n        <div className=\"user__list\">\n        <h2 style={{fontSize:\"23px\"}}>Users List</h2>\n        \n        {loading ?<LoadingSpinner asOverlay/>:error?<Card>{error}</Card>:\n        <table>\n        <tbody>\n        <tr>\n            <th>#</th>\n            <th>Name</th>\n            <th>Email</th>\n            <th>Address</th>\n            <th>Role</th>\n            <th>Candidate</th>\n            <th>Actions</th>\n        </tr>\n        {users.map((user)=>(\n            <tr key={user.id}>\n            <td>{user.id}</td>\n            <td>{user.name}</td>\n            <td>{user.email}</td>\n            <td>{user.location}</td>\n            <td>{user.isAdmin?'Yes':'No'}</td>\n            <td>{user.isCandidate?'Yes':'No'}</td>\n            <td>\n            <Link to={`/admin/users/${user.id}`}>\n            <Controls.ActionButton color='primary'>\n            <EditOutlined\n              fontSize='small'\n            />\n          </Controls.ActionButton>\n          </Link>\n          <Controls.ActionButton\n            color='default'>\n            <DeleteOutline fontSize='small' onClick={() => deleteHandler(user.id)}/>\n          </Controls.ActionButton>\n            </td>\n        </tr>\n        ))}     \n        </tbody> \n        </table>\n\n    }\n    <Notification notify={notify} setNotify={setNotify} />\n\n     \n        </div>\n    )\n}\n\nexport default UserListScreen\n"]},"metadata":{},"sourceType":"module"}