{"ast":null,"code":"var _jsxFileName = \"/Users/pacifique/Desktop/UC/ClASSpROJECT/voteTante/frontend/src/screen/ApplyScreen.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Button from '../shared/components/FormElements/Button';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Card from '../shared/components/UIElements/Card';\nimport LoadingSpinner from '../shared/components/UIElements/LoadingSpinner';\nimport './EditProfileScreen.css';\nimport Notification from '../shared/components/UIElements/Notification';\nimport { listPostDetails, PostUpdate } from '../Action/PostActions';\nimport { POST_UPDATE_RESET } from '../constants/PostConstants';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ApplyScreen({\n  match,\n  history\n}) {\n  _s();\n\n  const [notify, setNotify] = useState({\n    isOpen: false,\n    message: '',\n    type: ''\n  });\n  const postId = match.params.id;\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [isActive, setIsActive] = useState(false);\n  const [isApplying, setIsApplying] = useState(false);\n  const dispatch = useDispatch();\n  const postDetails = useSelector(state => state.postDetails);\n  const {\n    loading,\n    error,\n    post\n  } = postDetails;\n  const postUpdate = useSelector(state => state.postUpdate);\n  const {\n    success: successUpdate,\n    error: errorUpdate,\n    loading: loadingUpdate\n  } = postUpdate;\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({\n        type: POST_UPDATE_RESET\n      });\n      history.push('/admin/posts');\n    } else {\n      if (!post.title || post.id !== Number(postId)) {\n        dispatch(listPostDetails(postId));\n      } else {\n        setTitle(post.title);\n        setDescription(post.description);\n        setIsActive(post.isActive);\n        setIsApplying(post.isApplying);\n      }\n    }\n  }, [dispatch, history, successUpdate, post, postId]);\n\n  const updateSubmitHandler = e => {\n    e.preventDefault();\n    dispatch(PostUpdate({\n      id: postId,\n      title,\n      description,\n      isActive,\n      isApplying\n    }));\n    setNotify({\n      isOpen: true,\n      message: 'Submitted Successfully',\n      type: 'success'\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/admin/posts/\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        style: {\n          position: 'absolute',\n          left: '200px',\n          outline: 'none'\n        },\n        type: \"button\",\n        className: \"btn btn-outline-secondary\",\n        children: \"GO BACK\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: updateSubmitHandler,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"login-form-register\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container-form\",\n          children: [errorUpdate && /*#__PURE__*/_jsxDEV(Card, {\n            children: errorUpdate\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 29\n          }, this), loadingUpdate && /*#__PURE__*/_jsxDEV(LoadingSpinner, {\n            asOverlay: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 31\n          }, this), loading ? /*#__PURE__*/_jsxDEV(LoadingSpinner, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this) : error ? /*#__PURE__*/_jsxDEV(Card, {\n            children: error\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 15\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-all\",\n            children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n              children: \"EDIT POST \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 91,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-control\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"title\",\n                children: \"Post Title\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 94,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n                type: \"text\",\n                id: \"title\",\n                placeholder: \"Enter Post Title\",\n                value: title,\n                onChange: e => setTitle(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 95,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-control\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                htmlFor: \"description\",\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 19\n              }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n                type: \"text\",\n                id: \"description\",\n                placeholder: \"Write a Description\",\n                value: description,\n                onChange: e => setDescription(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 19\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-control\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-check form-switch\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  checked: isActive,\n                  onChange: e => setIsActive(e.target.checked),\n                  className: \"form-check-input\",\n                  type: \"checkbox\",\n                  id: \"flexSwitchCheckDefault\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 115,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"form-check-label\",\n                  htmlFor: \"flexSwitchCheckDefault\",\n                  children: \"Active\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 122,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 114,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 113,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-control\",\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-check form-switch\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  checked: isApplying,\n                  onChange: e => setIsApplying(e.target.checked),\n                  className: \"form-check-input\",\n                  type: \"checkbox\",\n                  id: \"flexSwitchCheckDefaults\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 21\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  className: \"form-check-label\",\n                  htmlFor: \"flexSwitchCheckDefaults\",\n                  children: [\"Users Application\", ' ']\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 138,\n                  columnNumber: 21\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 130,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 129,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              children: \"SAVE UPDATES\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Notification, {\n      notify: notify,\n      setNotify: setNotify\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n_s(ApplyScreen, \"xnPQIc1NSm2sNmjXoKXjI8K54F0=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = ApplyScreen;\nexport default ApplyScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ApplyScreen\");","map":{"version":3,"sources":["/Users/pacifique/Desktop/UC/ClASSpROJECT/voteTante/frontend/src/screen/ApplyScreen.js"],"names":["React","useEffect","useState","Button","useSelector","useDispatch","Link","Card","LoadingSpinner","Notification","listPostDetails","PostUpdate","POST_UPDATE_RESET","ApplyScreen","match","history","notify","setNotify","isOpen","message","type","postId","params","id","title","setTitle","description","setDescription","isActive","setIsActive","isApplying","setIsApplying","dispatch","postDetails","state","loading","error","post","postUpdate","success","successUpdate","errorUpdate","loadingUpdate","push","Number","updateSubmitHandler","e","preventDefault","position","left","outline","target","value","checked"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Button from '../shared/components/FormElements/Button';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport Card from '../shared/components/UIElements/Card';\nimport LoadingSpinner from '../shared/components/UIElements/LoadingSpinner';\nimport './EditProfileScreen.css';\nimport Notification from '../shared/components/UIElements/Notification';\nimport { listPostDetails, PostUpdate } from '../Action/PostActions';\nimport { POST_UPDATE_RESET } from '../constants/PostConstants';\n\nfunction ApplyScreen({ match, history }) {\n  const [notify, setNotify] = useState({\n    isOpen: false,\n    message: '',\n    type: '',\n  });\n  const postId = match.params.id;\n  const [title, setTitle] = useState('');\n  const [description, setDescription] = useState('');\n  const [isActive, setIsActive] = useState(false);\n  const [isApplying, setIsApplying] = useState(false);\n\n  const dispatch = useDispatch();\n\n  const postDetails = useSelector((state) => state.postDetails);\n  const { loading, error, post } = postDetails;\n\n  const postUpdate = useSelector((state) => state.postUpdate);\n  const {\n    success: successUpdate,\n    error: errorUpdate,\n    loading: loadingUpdate,\n  } = postUpdate;\n\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({ type: POST_UPDATE_RESET });\n      history.push('/admin/posts');\n    } else {\n      if (!post.title || post.id !== Number(postId)) {\n        dispatch(listPostDetails(postId));\n      } else {\n        setTitle(post.title);\n        setDescription(post.description);\n        setIsActive(post.isActive);\n        setIsApplying(post.isApplying);\n      }\n    }\n  }, [dispatch, history, successUpdate, post, postId]);\n\n  const updateSubmitHandler = (e) => {\n    e.preventDefault();\n\n    dispatch(\n      PostUpdate({\n        id: postId,\n        title,\n        description,\n        isActive,\n        isApplying,\n      })\n    );\n    setNotify({\n      isOpen: true,\n      message: 'Submitted Successfully',\n      type: 'success',\n    });\n  };\n  return (\n    <div>\n      <Link to='/admin/posts/'>\n        <button\n          style={{ position: 'absolute', left: '200px', outline: 'none' }}\n          type='button'\n          className='btn btn-outline-secondary'>\n          GO BACK\n        </button>\n      </Link>\n      <form onSubmit={updateSubmitHandler}>\n        <div className='login-form-register'>\n          <div className='container-form'>\n            {errorUpdate && <Card>{errorUpdate}</Card>}\n            {loadingUpdate && <LoadingSpinner asOverlay />}\n            {loading ? (\n              <LoadingSpinner />\n            ) : error ? (\n              <Card>{error}</Card>\n            ) : (\n              <div className='form-all'>\n                <h2>EDIT POST </h2>\n\n                <div className='form-control'>\n                  <label htmlFor='title'>Post Title</label>\n                  <input\n                    type='text'\n                    id='title'\n                    placeholder='Enter Post Title'\n                    value={title}\n                    onChange={(e) => setTitle(e.target.value)}\n                  />\n                </div>\n                <div className='form-control'>\n                  <label htmlFor='description'>Description</label>\n                  <textarea\n                    type='text'\n                    id='description'\n                    placeholder='Write a Description'\n                    value={description}\n                    onChange={(e) => setDescription(e.target.value)}\n                  />\n                </div>\n                <div className='form-control'>\n                  <div className='form-check form-switch'>\n                    <input\n                      checked={isActive}\n                      onChange={(e) => setIsActive(e.target.checked)}\n                      className='form-check-input'\n                      type='checkbox'\n                      id='flexSwitchCheckDefault'\n                    />\n                    <label\n                      className='form-check-label'\n                      htmlFor='flexSwitchCheckDefault'>\n                      Active\n                    </label>\n                  </div>\n                </div>\n                <div className='form-control'>\n                  <div className='form-check form-switch'>\n                    <input\n                      checked={isApplying}\n                      onChange={(e) => setIsApplying(e.target.checked)}\n                      className='form-check-input'\n                      type='checkbox'\n                      id='flexSwitchCheckDefaults'\n                    />\n                    <label\n                      className='form-check-label'\n                      htmlFor='flexSwitchCheckDefaults'>\n                      Users Application{' '}\n                    </label>\n                  </div>\n                </div>\n\n                <Button type='submit'>SAVE UPDATES</Button>\n              </div>\n            )}\n          </div>\n        </div>\n      </form>\n      <Notification notify={notify} setNotify={setNotify} />\n    </div>\n  );\n}\n\nexport default ApplyScreen;\n"]},"metadata":{},"sourceType":"module"}